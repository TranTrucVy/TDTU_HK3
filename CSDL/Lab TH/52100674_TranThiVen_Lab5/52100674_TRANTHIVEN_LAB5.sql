--52100674 TRANTHIVEN
--LAB4
USE MASTER
GO

DROP DATABASE IF EXISTS STUDENTMANAGE 
GO

CREATE DATABASE STUDENTMANAGE
GO 

USE STUDENTMANAGE
GO

IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='DEPARTMENT')
DROP TABLE DEPARTMENT
GO

CREATE TABLE DEPARTMENT(
	D_ID VARCHAR(10) NOT NULL,
	D_NAME VARCHAR(30) NOT NULL,
	D_YEAR INT NOT NULL,

	PRIMARY KEY(D_ID)
)

IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='STUDENT')
DROP TABLE STUDENT
GO

CREATE TABLE STUDENT(
	S_ID VARCHAR(10) NOT NULL,
	S_NAME VARCHAR(30) NOT NULL,
	S_YEAR DATE,
	ID VARCHAR (10) NOT NULL,

	PRIMARY KEY(S_ID)
)


IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='COURSES')
DROP TABLE COURSES
GO

CREATE TABLE COURSES(
	C_ID VARCHAR(10) NOT NULL,
	C_NAME VARCHAR(30) NOT NULL,
	CREDIT INT NOT NULL,
	ID VARCHAR (10) NOT NULL,

	PRIMARY KEY(C_ID)
)

IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='CONDITION')
DROP TABLE CONDITION
GO

CREATE TABLE CONDITION(
	CID VARCHAR(10) NOT NULL,
	PRE_CID VARCHAR(10) NOT NULL,

	PRIMARY KEY(CID, PRE_CID)
)

IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='RESULT')
DROP TABLE RESULT
GO

CREATE TABLE RESULT(
	R_SID VARCHAR(10) NOT NULL,
	R_CID VARCHAR(10) NOT NULL,
	SCORE FLOAT NOT NULL,

	--PRIMARY KEY(R_SID, R_CID)
)

ALTER TABLE COURSES ADD CONSTRAINT FK_COURSES_ID FOREIGN KEY (ID) REFERENCES DEPARTMENT(D_ID)

ALTER TABLE STUDENT ADD CONSTRAINT FK_STUDENT_ID FOREIGN KEY (ID) REFERENCES DEPARTMENT(D_ID)

ALTER TABLE CONDITION ADD 
	CONSTRAINT FK_CONDITION_CID FOREIGN KEY (CID) REFERENCES COURSES(C_ID),
	CONSTRAINT FK_CONDITION_PRE_CID FOREIGN KEY (PRE_CID) REFERENCES COURSES(C_ID)

INSERT INTO DEPARTMENT
VALUES
		('IT', 'Information Technology', 2012),
		('ET', 'Electronic Technology', 1997),
		('BT', 'Biotechnology', 1997),
		('FL', 'Foreign language', 2000),
		('CT', 'Chemical Technology', 2011);

INSERT INTO STUDENT
VALUES
		('S01','Phuoc Tran','1990/02/24','IT'),
		('S02','Timothy','2000/12/12','IT'),
		('S03','Kaily','2001/10/01','ET'),
		('S04','Tam Nguyen','1998/12/10','ET'),
		('S05','Lee Nguyen','1999/02/28','BT');
INSERT INTO STUDENT
VALUES
('S06','NGUYEN TAM','2005/02/28','IT'),
('S07','TAM NGUYEN','2007/02/28','IT');
	
INSERT INTO COURSES
VALUES
		('OOP','Object Oriented Programming','4','IT'),
		('PM','Programming Method','4','IT'),
		('DBS','Databased System','4','IT'),
		('SE','Software Engineering','4','IT'),
		('CN','Computer Network','3','IT');
INSERT INTO COURSES
VALUES
		('TH','Triết Học','4','BT');

INSERT INTO CONDITION
VALUES
		('OOP','PM'),
		('DBS','PM'),
		('DBS','OOP'),
		('SE','OOP'),
		('SE','DBS');

INSERT INTO RESULT
VALUES
		('S01','PM','9.5'),
		('S01','OOP','10'),
		('S02','PM','4.5'),
		('S02','DBS','6.0'),
		('S03','DBS','8.0');

INSERT INTO RESULT
VALUES
('S05','DBS','5');
INSERT INTO RESULT
VALUES
('S05','TH','10');

INSERT INTO RESULT
VALUES
('S06','TH','8'),
('S07','TH','6');
ALTER TABLE RESULT
ADD CONSTRAINT PK_S_ID_C_ID PRIMARY KEY (R_SID, R_CID);

ALTER TABLE RESULT ADD 
	CONSTRAINT FK_RESULT_R_SID FOREIGN KEY (R_SID) REFERENCES STUDENT(S_ID),
	CONSTRAINT FK_RESULT_R_CID FOREIGN KEY (R_CID) REFERENCES COURSES(C_ID)

--LAB4
SELECT * FROM DEPARTMENT
SELECT * FROM STUDENT

--1 Liệt kê những khoa không có sinh viên
SELECT D.D_NAME FROM DEPARTMENT AS D
WHERE D.D_ID NOT IN ( SELECT S.ID FROM STUDENT AS S)

--2 Liệt kê những khoa không có môn học nào
SELECT D.D_NAME FROM DEPARTMENT AS D
WHERE D.D_ID NOT IN ( SELECT C.ID FROM COURSES AS C)

--3 Cho biết những môn học chưa được sinh viên nào chọn học
SELECT C.C_NAME FROM COURSES AS C
WHERE C.C_ID NOT IN (SELECT R.R_CID FROM RESULT AS R)

--4 Liệt kê những sinh viên chưa đăng ký học môn nào
SELECT S.S_NAME FROM STUDENT AS S
WHERE S.S_ID NOT IN ( SELECT R.R_SID FROM RESULT AS R)

--5 Liệt kê những sinh viên có điểm trung bình duoi 5
SELECT S.S_NAME FROM STUDENT AS S, RESULT AS R
WHERE S.S_ID=R.R_SID
GROUP BY R.R_SID,S.S_NAME
HAVING AVG(SCORE)<5

--6 Liệt kê những sinh viên có điểm trung bình cao nhất lớp
SELECT S.S_NAME FROM STUDENT AS S, RESULT AS R
WHERE S.S_ID = R.R_SID
GROUP BY S.S_NAME, R.R_SID
HAVING AVG(SCORE)>= ALL(
	SELECT AVG(SCORE) FROM RESULT 
	GROUP BY R_SID)

--7 Liệt kê những môn học được nhiều sinh viên chọn học nhất
SELECT C.C_NAME FROM COURSES AS C, RESULT AS R
WHERE C.C_ID = R.R_CID
GROUP BY C.C_NAME, R.R_CID
HAVING COUNT(R.R_SID)>=ALL(
	SELECT COUNT(R.R_SID) FROM RESULT
	GROUP BY R_CID)

--8 Liệt kê những môn học có ít hơn 5 sinh viên chọn học
SELECT C.C_NAME FROM COURSES AS C, RESULT AS R
WHERE C.C_ID = R.R_CID
GROUP BY C.C_NAME, R.R_CID
HAVING COUNT(R.R_CID)< 5

--9 Liệt kê những môn học có ít nhất 2 sinh viên đăng ký theo học
SELECT C.C_NAME FROM COURSES AS C, RESULT AS R
WHERE C.C_ID = R.R_CID
GROUP BY C.C_NAME, R.R_CID
HAVING COUNT(R.R_CID) >=2

--10 Liệt kê các khoa có sinh viên có điểm trung bình cao nhất
SELECT D_NAME
FROM DEPARTMENT AS D,STUDENT AS S,RESULT AS R
WHERE D.D_ID=S.ID AND S.S_ID=R.R_SID
GROUP BY D.D_NAME,D.D_ID
HAVING AVG(SCORE)>=ALL(
	SELECT AVG(SCORE)
	FROM DEPARTMENT AS D,STUDENT AS S,RESULT AS R
	WHERE D.D_ID=S.ID AND S.S_ID=R.R_SID
	GROUP BY D.D_ID
)

--11 Cộng thêm 1 điểm cho sinh viên khoa IT
UPDATE RESULT SET SCORE+=1
WHERE RESULT.R_SID IN(
	SELECT S_ID FROM DEPARTMENT AS D,STUDENT AS S
	WHERE D.D_ID=S.ID AND S.ID='IT'
)
SELECT * FROM RESULT

--12 Cộng thêm 1 điểm cho sinh viên IT. Nếu điểm sau cùng lớn hơn 10 thì chỉ được lấy là 10
UPDATE RESULT SET SCORE=(
	CASE WHEN SCORE+1>10 THEN 10 ELSE SCORE+1 END
)
WHERE RESULT.R_SID IN(
	SELECT S_ID FROM DEPARTMENT AS D,STUDENT AS S
	WHERE D.D_ID=S.ID AND S.ID='IT'
)
SELECT * FROM RESULT

--13 Sắp xếp giảm dần theo điểm trung bình của từng sinh viên, nếu điểm trung bình trùng nhau
--   thì sắp xếp tăng dần theo ngày sinh
SELECT S_NAME, S.S_YEAR, R.SCORE
FROM STUDENT AS S,RESULT AS R
WHERE S.S_ID=R.R_SID
GROUP BY S_NAME, S.S_YEAR, R.SCORE
ORDER BY AVG(SCORE) DESC,DAY(S_YEAR) ASC

--14 Cho biết danh sách các môn học không có sinh viên học kém nhất lớp tham gia
SELECT C_NAME FROM COURSES AS C,RESULT AS R
WHERE C.C_ID=R.R_CID
GROUP BY C_NAME,R.R_CID
HAVING AVG(SCORE)<ALL(
	SELECT AVG(SCORE) FROM RESULT AS R,STUDENT AS S
	WHERE S.S_ID=R.R_SID AND S.ID='IT'
	GROUP BY R.R_CID
)

--15 Cho biết những sinh viên có điểm trung bình cao hơn điểm trung bình của sinh viên khoa IT
SELECT S_NAME FROM STUDENT AS S,RESULT AS R
WHERE S.S_ID=R.R_SID
GROUP BY R.R_SID,S_NAME
HAVING AVG(SCORE)>ALL(
	SELECT AVG(SCORE) FROM RESULT AS R,STUDENT AS S
	WHERE S.S_ID=R.R_SID AND S.ID='IT'
	GROUP BY R.R_SID
)

--16 Liệt kê sinh viên có họ là “Nguyễn”, &lt; 20 tuổi và có điểm trung bình &gt;= 5
SELECT S_NAME FROM STUDENT AS S,RESULT AS R
WHERE S_NAME LIKE N'NGUYEN%' AND YEAR(GETDATE())-YEAR(S_YEAR)<20 AND S.S_ID=R.R_SID
GROUP BY R.R_SID,S_NAME
HAVING AVG(SCORE)>=5