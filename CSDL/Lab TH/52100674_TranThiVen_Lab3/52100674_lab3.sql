--52100674 TRANTHIVEN
--LAB3
USE MASTER
GO

DROP DATABASE IF EXISTS STUDENTMANAGE 
GO

CREATE DATABASE STUDENTMANAGE
GO 

USE STUDENTMANAGE
GO

IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='DEPARTMENT')
DROP TABLE DEPARTMENT
GO

CREATE TABLE DEPARTMENT(
	D_ID VARCHAR(10) NOT NULL,
	D_NAME VARCHAR(30) NOT NULL,
	D_YEAR INT NOT NULL,

	PRIMARY KEY(D_ID)
)

IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='STUDENT')
DROP TABLE STUDENT
GO

CREATE TABLE STUDENT(
	S_ID VARCHAR(10) NOT NULL,
	S_NAME VARCHAR(30) NOT NULL,
	S_YEAR DATE,
	ID VARCHAR (10) NOT NULL,

	PRIMARY KEY(S_ID)
)


IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='COURSES')
DROP TABLE COURSES
GO

CREATE TABLE COURSES(
	C_ID VARCHAR(10) NOT NULL,
	C_NAME VARCHAR(30) NOT NULL,
	CREDIT INT NOT NULL,
	ID VARCHAR (10) NOT NULL,

	PRIMARY KEY(C_ID)
)

IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='CONDITION')
DROP TABLE CONDITION
GO

CREATE TABLE CONDITION(
	CID VARCHAR(10) NOT NULL,
	PRE_CID VARCHAR(10) NOT NULL,

	PRIMARY KEY(CID, PRE_CID)
)

IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='RESULT')
DROP TABLE RESULT
GO

CREATE TABLE RESULT(
	R_SID VARCHAR(10) NOT NULL,
	R_CID VARCHAR(10) NOT NULL,
	SCORE FLOAT NOT NULL,

	--PRIMARY KEY(R_SID, R_CID)
)

ALTER TABLE COURSES ADD CONSTRAINT FK_COURSES_ID FOREIGN KEY (ID) REFERENCES DEPARTMENT(D_ID)

ALTER TABLE STUDENT ADD CONSTRAINT FK_STUDENT_ID FOREIGN KEY (ID) REFERENCES DEPARTMENT(D_ID)

ALTER TABLE CONDITION ADD 
	CONSTRAINT FK_CONDITION_CID FOREIGN KEY (CID) REFERENCES COURSES(C_ID),
	CONSTRAINT FK_CONDITION_PRE_CID FOREIGN KEY (PRE_CID) REFERENCES COURSES(C_ID)

INSERT INTO DEPARTMENT
VALUES
		('IT', 'Information Technology', 2012),
		('ET', 'Electronic Technology', 1997),
		('BT', 'Biotechnology', 1997),
		('FL', 'Foreign language', 2000),
		('CT', 'Chemical Technology', 2011);

INSERT INTO STUDENT
VALUES
		('S01','Phuoc Tran','1990/02/24','IT'),
		('S02','Timothy','2000/12/12','IT'),
		('S03','Kaily','2001/10/01','ET'),
		('S04','Tam Nguyen','1998/12/10','ET'),
		('S05','Lee Nguyen','1999/02/28','BT');

	
INSERT INTO COURSES
VALUES
		('OOP','Object Oriented Programming','4','IT'),
		('PM','Programming Method','4','IT'),
		('DBS','Databased System','4','IT'),
		('SE','Software Engineering','4','IT'),
		('CN','Computer Network','3','IT');

INSERT INTO CONDITION
VALUES
		('OOP','PM'),
		('DBS','PM'),
		('DBS','OOP'),
		('SE','OOP'),
		('SE','DBS');

INSERT INTO RESULT
VALUES
		('S01','PM','9.5'),
		('S01','OOP','10'),
		('S02','PM','4.5'),
		('S02','DBS','6.0'),
		('S03','DBS','8.0');

ALTER TABLE RESULT
ADD CONSTRAINT PK_S_ID_C_ID PRIMARY KEY (R_SID, R_CID);

ALTER TABLE RESULT ADD 
	CONSTRAINT FK_RESULT_R_SID FOREIGN KEY (R_SID) REFERENCES STUDENT(S_ID),
	CONSTRAINT FK_RESULT_R_CID FOREIGN KEY (R_CID) REFERENCES COURSES(C_ID)


 --LAB 3:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
--1 List the students in the “IT” department
SELECT * FROM DBO.STUDENT 
WHERE ID = 'IT'

--2 List the faculties were established for more than 20 years 
SELECT * FROM DBO.DEPARTMENT
WHERE YEAR(GETDATE()) - D_YEAR < 20

--3 List the courses that belong to the “IT” department and have credits &gt;= 5
SELECT * FROM DBO.COURSES
WHERE CREDIT >= 5 AND ID = 'IT'

--4 List the previous courses of the course with the code “DBS”
SELECT PRE_CID FROM DBO.CONDITION
WHERE CID = 'DBS'

SELECT * FROM STUDENT
--5 List the student ID, name, Course Id, Course name, score of students in “IT” department
SELECT S_ID, S_NAME, C_ID, C_NAME, SCORE FROM DBO.STUDENT, DBO.COURSES, DBO.RESULT
WHERE DBO.STUDENT.S_ID = DBO.RESULT.R_SID AND DBO.COURSES.C_ID = DBO.RESULT.R_CID AND DBO.STUDENT.ID = 'IT'

--6 Display all student IDs in the student table; course id, student&#39;s course score. 
--	If the student has no score, the course id and score columns are null (Hint: using … join).
SELECT DBO.STUDENT.S_ID, DBO.RESULT.R_CID, DBO.RESULT.SCORE
FROM DBO.STUDENT
LEFT JOIN DBO.RESULT
ON DBO.STUDENT.S_ID = DBO.RESULT.R_SID
ORDER BY DBO.STUDENT.S_ID

--7 List the courses that do not have previous courses.
SELECT * FROM COURSES
WHERE COURSES.C_ID NOT IN (SELECT CID FROM CONDITION)

--8 Show the number of ''students'' in each Department.
SELECT DEPARTMENT.D_NAME, COUNT(STUDENT.S_ID) AS SOLUONG
FROM DEPARTMENT
LEFT JOIN STUDENT
ON DEPARTMENT.D_ID = STUDENT.ID
GROUP BY STUDENT.ID, DEPARTMENT.D_NAME

--9 Show the number of ''courses'' in each Department.
SELECT DEPARTMENT.D_NAME, COUNT(COURSES.C_ID) AS SOLUONG
FROM DEPARTMENT
LEFT JOIN COURSES
ON DEPARTMENT.D_ID = COURSES.ID
GROUP BY COURSES.ID, DEPARTMENT.D_NAME

--10 List "departments" that have more than 10 students
SELECT *
FROM DEPARTMENT
LEFT JOIN STUDENT
ON DEPARTMENT.D_ID = STUDENT.ID
GROUP BY DEPARTMENT.D_ID, DEPARTMENT.D_NAME, DEPARTMENT.D_YEAR, STUDENT.S_ID, STUDENT.S_NAME, STUDENT.ID, STUDENT.S_YEAR
HAVING COUNT(STUDENT.S_ID)>10

--11 List courses that have more than 10 student choose to learn
SELECT *
FROM COURSES
LEFT JOIN RESULT
ON COURSES.C_ID = RESULT.R_CID
GROUP BY COURSES.C_ID, COURSES.C_NAME, COURSES.CREDIT, COURSES.ID, RESULT.R_CID, RESULT.R_SID, RESULT.SCORE
HAVING COUNT(RESULT.R_CID)>10

--12 List Students’ id, name, average
SELECT STUDENT.S_ID, STUDENT.S_NAME, AVG(RESULT.SCORE) AS AVERAGE
FROM STUDENT
LEFT JOIN RESULT
ON STUDENT.S_ID=RESULT.R_SID
GROUP BY STUDENT.S_ID, STUDENT.S_NAME

--13 Show the highest average.
SELECT MAX(DTB) AS DTB_CAONHAT FROM
(
	SELECT AVG(RESULT.SCORE) AS DTB
	FROM STUDENT
	LEFT JOIN RESULT
	ON STUDENT.S_ID=RESULT.R_SID
	GROUP BY STUDENT.S_ID,STUDENT.S_NAME
) AS M

--14 Show the lowest average of the students.
SELECT MIN(DTB) AS DTB_THAPNHAT FROM
(
	SELECT AVG(RESULT.SCORE) AS DTB
	FROM STUDENT
	LEFT JOIN RESULT
	ON STUDENT.S_ID=RESULT.R_SID
	GROUP BY STUDENT.S_ID,STUDENT.S_NAME
) AS M